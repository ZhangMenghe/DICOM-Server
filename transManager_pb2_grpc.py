# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import transManager_pb2 as transManager__pb2


class dataTransferStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.getAvailableDatasetInfos = channel.unary_stream(
        '/helmsley.dataTransfer/getAvailableDatasetInfos',
        request_serializer=transManager__pb2.Request.SerializeToString,
        response_deserializer=transManager__pb2.datasetInfo.FromString,
        )
    self.getConfig = channel.unary_unary(
        '/helmsley.dataTransfer/getConfig',
        request_serializer=transManager__pb2.Request.SerializeToString,
        response_deserializer=transManager__pb2.bundleConfig.FromString,
        )
    self.Download = channel.unary_stream(
        '/helmsley.dataTransfer/Download',
        request_serializer=transManager__pb2.Request.SerializeToString,
        response_deserializer=transManager__pb2.dcmImage.FromString,
        )


class dataTransferServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def getAvailableDatasetInfos(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getConfig(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Download(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_dataTransferServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'getAvailableDatasetInfos': grpc.unary_stream_rpc_method_handler(
          servicer.getAvailableDatasetInfos,
          request_deserializer=transManager__pb2.Request.FromString,
          response_serializer=transManager__pb2.datasetInfo.SerializeToString,
      ),
      'getConfig': grpc.unary_unary_rpc_method_handler(
          servicer.getConfig,
          request_deserializer=transManager__pb2.Request.FromString,
          response_serializer=transManager__pb2.bundleConfig.SerializeToString,
      ),
      'Download': grpc.unary_stream_rpc_method_handler(
          servicer.Download,
          request_deserializer=transManager__pb2.Request.FromString,
          response_serializer=transManager__pb2.dcmImage.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'helmsley.dataTransfer', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
