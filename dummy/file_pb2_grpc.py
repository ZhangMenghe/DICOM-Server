# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import file_pb2 as file__pb2


class fileChunkerStub(object):
  """`service` 是用来给gRPC服务定义方法的, 格式固定, 类似于Golang中定义一个接口
  `service` is used to define methods for gRPC services in a fixed format, similar to defining
  an interface in Golang
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.BidirectionalStreamingMethod = channel.stream_stream(
        '/demo.fileChunker/BidirectionalStreamingMethod',
        request_serializer=file__pb2.Request.SerializeToString,
        response_deserializer=file__pb2.Response.FromString,
        )
    self.upload = channel.stream_unary(
        '/demo.fileChunker/upload',
        request_serializer=file__pb2.Chunk.SerializeToString,
        response_deserializer=file__pb2.Response.FromString,
        )
    self.download = channel.unary_stream(
        '/demo.fileChunker/download',
        request_serializer=file__pb2.Request.SerializeToString,
        response_deserializer=file__pb2.Chunk.FromString,
        )


class fileChunkerServicer(object):
  """`service` 是用来给gRPC服务定义方法的, 格式固定, 类似于Golang中定义一个接口
  `service` is used to define methods for gRPC services in a fixed format, similar to defining
  an interface in Golang
  """

  def BidirectionalStreamingMethod(self, request_iterator, context):
    """双向流模式 (在一次调用中, 客户端和服务器都可以向对方多次收发数据)
    stream-stream (In a single call, both client and server can send and receive data
    to each other multiple times.)
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def upload(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def download(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_fileChunkerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'BidirectionalStreamingMethod': grpc.stream_stream_rpc_method_handler(
          servicer.BidirectionalStreamingMethod,
          request_deserializer=file__pb2.Request.FromString,
          response_serializer=file__pb2.Response.SerializeToString,
      ),
      'upload': grpc.stream_unary_rpc_method_handler(
          servicer.upload,
          request_deserializer=file__pb2.Chunk.FromString,
          response_serializer=file__pb2.Response.SerializeToString,
      ),
      'download': grpc.unary_stream_rpc_method_handler(
          servicer.download,
          request_deserializer=file__pb2.Request.FromString,
          response_serializer=file__pb2.Chunk.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'demo.fileChunker', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
